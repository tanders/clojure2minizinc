
* TODO !! Revise clojure2minizinc with new MiniZinc documentation

  http://www.minizinc.org/resources.html


** Relevant documentation

   Note: there is meanwhile revised and fuller documentation available 


   See FlatZinc, MiniZinc, and Zinc documentation

   Specification of FlatZinc
   http://www.minizinc.org/downloads/doc-1.6/flatzinc-spec.pdf
  
   Converting MiniZinc to FlatZinc
   http://www.minizinc.org/downloads/doc-1.6/mzn2fzn.pdf

   MiniZinc Tutorial
   http://www.minizinc.org/downloads/doc-latest/minizinc-tute.pdf

   Specifications
   http://www.minizinc.org/specifications.html


* Soft constraints

  Check out / test MiniBrass for soft constraints
  http://isse-augsburg.github.io/constraint-relationships/
  https://github.com/isse-augsburg/constraint-relationships
  Local
  [[file:///Users/torsten/Clojure/Clojure2MiniZinc/clojure2minizinc/resources/MiniBrass/][MiniBrass]]

  Contact: Alexander Schiendorfer, Augsburg University 
  https://github.com/Alexander-Schiendorfer
  https://www.informatik.uni-augsburg.de/lehrstuehle/swt/se/staff/aschiendorfer/

  They use MiniSearch -- A meta-search language for MiniZinc
  http://www.minizinc.org/minisearch/


* TODO Again, naming convention

  loco has leading $ before all its function, e.g., $=, $+ etc.
  https://github.com/aengelberg/loco

  Consider using that.

  Also, consider alternative shorter names for functions like variable (var), constraint (c ?) etc.



* Improving performance

  Compilation of MiniZinc to FlatZinc can take quite some time, as I know already from experience, while solving the problem expressed in FlatZinc can be comparatively fast (depending on the problem). 

  I already considered for realtime applications to save the generated FlatZinc output, and to jus replace some variables (or data file?) there to run the same problem multiple times in a realtime application (remember how I did realtime constraint programming with Strasheela...)

  Alternatively, Hakan Kjellerstrand suggested to translate to FlatZinc directly, but I put that on the backburner for quite some time.


  https://www.minizinc.org/forum/viewtopic.php?f=4&t=670



* DONE Naming conventions 
  CLOSED: [2014-05-20 Tue 20:05]

  Many names MiniZinc keywords clash with Clojure function/macro/etc names. I do not want to confuse those, but finding different -- and much longer -- names is also not really a good idea. 

  Can I have some initial character before all clojure2minizinc defs, that does not hinder reading the actual name?

  Ideas:

  -int

  !! _int
  Note that _ has special meaning (required but unused argument), but longer vars are perhaps different
  vars starting with _ are seemingly used also in other contexts, e.g., __meta  http://onclojure.com/
  

  !!? =int -- makes it clear that there is a constraint..

  - Problem only for function names etc that start with [Sonderzeichen], such as =, -> etc.
  - Consider shadowing = 

    

* DONE Simplify design: records only for decision variables
  CLOSED: [2014-05-17 Sat 14:20]

* Allow debugging of resulting code
  
** Somehow translate line of code numbers of resulting *.mzn file into code line in original Clojure file

   Each function definition in Clojure has its file, line etc. saved as meta data, e.g., 

   (meta #'+)
  
   ; -> {:added "1.2", :ns #namespace[clojure.core], :name +, :file "clojure/core.clj", :inline-arities #function[clojure.core/>1?], :column 1, :line 965, :arglists ([] [x] [x y] [x y & more]), :doc "Returns the sum of nums. (+) returns 0. Does not auto-promote\n  longs, will throw on overflow. See also: +'", :inline #function[clojure.core/nary-inline/fn--4494]}

   
   If I would represent all mzn strings internally (again?) by a map that stores such information, then it should be possible to translate mzn line numbers into the corresponding cjr2mzn line numbers, at least for those that are created/applied by function calls. 
   However, how to resolve the location of all the other code, e.g., (mz/-- 1 n) does call a function, but I am interested in the source code location of the function call, not of the function here...



* Add parameters (plain integers etc)


* Extend interface for minizinc 
  
  - Additional solver args
  - Try calling other solvers (Gecode...)


* Add set domain


* Add constraints

  See list at http://www.minizinc.org/downloads/doc-1.6/mzn-globals.html

  Are these defined in the MiniZinc lib? https://github.com/MiniZinc/minizinc-stdlib/tree/master/lib/minizinc/std


* Add Visualizing MiniZinc models with CP-Viz

  See http://www.minizinc.org/downloads/doc-1.6/mzn-viz.pdf

