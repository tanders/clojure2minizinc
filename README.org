* clojure2minizinc

** Summary

   /clojure2minizinc/ provides an interface between state-of-the-art constraint solvers (via [[www.minizinc.org][MiniZinc]]) and a very high-level programming language with excellent abstraction capabilities, [[http://clojure.org][Clojure]]. The clojure2minizinc user models in Clojure constraint satisfaction or optimisation problems over Boolean, integer, real number, and/or set variables. clojure2minizinc translates them into MiniZinc, they are solved in the background by [[http://www.minizinc.org/software.html][a compatible solver]], and the result is read back into Clojure. clojure2minizinc code can be very similar to the corresponding MiniZinc code, but in addition the full power of Clojure is at hand. 


** Installation 

*** Installation of MiniZinc tools

     - Install the [[http://www.minizinc.org/g12distrib.html][G12 MiniZinc Distribution]] (includes translation of MiniZinc to intermediate simpler format FlatZinc, which is understood by many solvers, but also ready-to-use solvers)

     - Optionally, install additional solvers. For example, see FlatZinc implementations at http://www.minizinc.org/software.html


*** Installation of clojure2minizinc

   Add this [[https://github.com/technomancy/leiningen][Leiningen]] dependency to your project:

#+begin_src clojure :results silent
[minizinc/clojure2minizinc "0.1.0-SNAPSHOT"]
#+end_src

# [![Clojars Project](http://clojars.org/minizinc/clojure2minizinc/latest-version.svg)](http://clojars.org/minizinc/clojure2minizinc)


** Usage: A Minimal Example 

   The following model declares two decision variables =a= and =b=, both with the domain /[-1 .. 1]/, and constraints them to be different.  

#+begin_src clojure :results silent
(ns clojure2minizinc.examples
  (:require [clojure2minizinc.core :as mz]))  

(mz/minizinc 
 (mz/clj2mnz
  (let [a (mz/variable (mz/-- -1 1)) 
        b (mz/variable (mz/-- -1 1))]
    (mz/constraint (mz/!= a b))
    (mz/solve :satisfy)
    (mz/output-map {:a a :b b})))
 :num-solutions 3)
#+end_src

   The model asks for three solutions, and the default solver outputs the following.

   =; => ({:a 0, :b -1} {:a 1, :b -1} {:a -1, :b 0})=


** Documentation
   
   clojure2minizinc comes with a [[./doc/tutorial.org][tutorial]] and [[./doc/reference/][reference documentation]], which are both part of the source tree. 


** Related Work

*** Clojure: core.logic
# Existing Clojure Constraint Systems

In the Clojure community there already exists an interest in Constraint Programming (and the related Logic Programming paradigm), and solvers have been developed for Clojure.

[[https://github.com/clojure/core.logic][core.logic]] implements logic and constraint programming facilities from scratch directly in Clojure. More specifically, it implements [[http://minikanren.org][miniKanren]] and some of its extensions, e.g., [[https://github.com/calvis/cKanren][cKanren]] for Constraint Logic Programming. For example, according to the [[https://github.com/clojure/core.logic/wiki/Features][documentation of core.logic]], it currently implements about 10 constraints on integers (arithmetic operations, comparisons, and the global constraint =distinct=).  

By contrast, clojure2minizinc provides an interface to a range of existing state-of-the-art constraint solvers. For example, in addition to constraints over integers (and many more constraints), it supports constraints over floats, sets, and reified constraints (i.e., the truth value of constraints can in turned be constrained, e.g., by logic relations such as implication or equivalence). Also, compared with the classical approach of Constraint Logic Programming implemented by cKanren, over the last twenty years the Constraint Programming community developed many techniques to greatly speed up the search process, which are implemented in state-of-the-art constraint solvers.

However, MiniZinc is not a Logic Programming language. For example, it does not provide unification of arbitrary terms (in contrast to equality constraints). 


*** C++: libmzn

  A project with similar goals as clojure2minizinc is [[http://cp2013.a4cp.org/sites/default/files/uploads/cospel2013_submission_7.pdf][libmzn]], which provides a C++ interface to MiniZinc. It is planned to be released as part of MiniZinc 2.0. 
 

** Contribute

   Most clojure2minizinc functions simply generate a string with the corresponding MiniZinc code. So, this library is very easy to extend to support by and by the full feature set of MiniZinc, and also MiniZinc extensions proposed by various research projects.
   
   Your contribution is welcome! 
   

** License

   Distributed under the GNU General Public License.

   Copyright Â© 2014 Torsten Anders

