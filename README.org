* clojure2minizinc

** Summary

   A Clojure library designed to solve constraint satisfaction problems (CSP). It generates [[www.minizinc.org][MiniZinc]] code from Clojure code, that is very similar to the corresponding MiniZinc code. The generated MiniZinc program is then solved by one of the MiniZinc solvers available (e.g., see http://www.minizinc.org/software.html), and the result is read back into Clojure.


** TODO What is MiniZinc and why clojure2minizinc?

   
   More information, in particular many MiniZinc-related links (e.g., to various solvers) can be found at
   http://www.hakank.org/minizinc/


** TODO Installation 

   - Installation of MiniZinc tools
     - Install the [[http://www.minizinc.org/g12distrib.html][G12 MiniZinc Distribution]] (includes translation of MiniZinc to intermediate simpler format FlatZinc, which is understood by many solvers, but also ready-to-use solvers)
     - Additional solvers (optional), e.g., see FlatZinc Implementations at http://www.minizinc.org/software.html

   - Installation of this library
     TODO: get installation with =lein= working


** TODO Usage 


*** TODO A Minimal Example 

#+begin_src clojure :results silent
(ns clojure2minizinc.examples
  (:require [clojure2minizinc.core :as mz]))  

(mz/minizinc 
   (mz/clj2mnz
    (let [a (mz/variable (mz/-- -1 1)) 
          b (mz/variable (mz/-- -1 1))]
      (mz/constraint (mz/!= a b))
      (mz/solve :satisfy)
      (mz/output-map {:a a :b b})))
   :num-solutions 3
   ;; :all-solutions? true
   )
#+end_src

    Results in =({:a 0, :b -1} {:a 1, :b -1} {:a -1, :b 0})=.
    
    Generates in the background this MiniZinc code and calls solver with it

    *TODO: add code*
    
    Note that this library overwrites many standard Clojure functions. You may want to use the library with a namespace prefix as in the example above.


*** Further Reading 


** Design 

   Most Clojure functions simply generate a string with the corresponding MiniZinc code. So, this library is very easy to extend to support not only the full feature set of MiniZinc, but also MiniZinc extensions proposed by various research projects.

   The downside is that debugging the Clojure programs is somewhat difficult. For example, error messages by MiniZinc refer to line numbers of the generated MiniZinc code. However, constraint problem debuggers are not too helpful anyway. A useful technique is usually to disable all constraints for testing and then by and by enabling them again. 


** Related Work

*** Clojure: core.logic
# Existing Clojure Constraint Systems

In the Clojure community there already exists an interest in Constraint Programming (and the related Logic Programming paradigm), and solvers have been developed for Clojure.

[[https://github.com/clojure/core.logic][core.logic]] implements logic and constraint programming facilities from scratch directly in Clojure. More specifically, it implements [[http://minikanren.org][miniKanren]] and some of its extensions, e.g., [[https://github.com/calvis/cKanren][cKanren]] for Constraint Logic Programming. For example, according to the [[https://github.com/clojure/core.logic/wiki/Features][documentation of core.logic]], it currently implements about 10 constraints on integers (arithmetic operations, comparisons, and the global constraint =distinct=).  

By contrast, clojure2minizinc provides an interface to a range of existing state-of-the-art constraint solvers. For example, in addition to constraints over integers (and many more constraints), it supports constraints over floats, sets, and reified constraints (i.e., the truth value of constraints can in turned be constrained, e.g., by logic relations such as implication or equivalence). Also, compared with the classical approach of Constraint Logic Programming implemented by cKanren, over the last twenty years the Constraint Programming community developed many techniques to greatly speed up the search process, which are implemented in state-of-the-art constraint solvers.

However, MiniZinc is not a Logic Programming language. For example, it does not provide unification of arbitrary terms (in contrast to equality constraints). 


*** C++: libmzn

  A project with similar goals as clojure2minizinc is [[http://cp2013.a4cp.org/sites/default/files/uploads/cospel2013_submission_7.pdf][libmzn]], which provides a C++ interface to MiniZinc. It is planned to be released as part of MiniZinc 2.0. 
 

** License

Copyright Â© 2014 Torsten Anders

Distributed under the GNU General Public License.


